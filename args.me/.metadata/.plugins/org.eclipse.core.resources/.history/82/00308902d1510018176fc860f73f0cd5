package de.webis.args.framework.querying;

import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Properties;

import de.webis.args.framework.querying.IQueryCreator;

/**
 * This class is the first step of the whole retrieval process 
 * (querying, retrieval, ranking, presentation). It can be used to
 * prepare queries for argument-retrieval.
 * It is fully configurable via the defined properties file.
 * <BR><BR>
 * File generation can be triggered either by executing the main method of this 
 * class or by creating an object of this class and then calling its method 
 * <CODE>generateQuery()</CODE>
 * <BR><BR>
 * The path of the properties file is stored in the public static variable
 * <CODE>ConfigPath</CODE> and can be modified if needed.
 * 
 * @author Henning Wachsmuth, Jiani Qu
 *
 */

public class GenericQueryGenerator {
	
	/**
	 * The path of the properties file to be used for configuration.
	 */
	public static final String ConfigPath = "conf/exampleConfig.properties";
	
	
	// -------------------------------------------------------------------------
	// PROPERTIES
	// -------------------------------------------------------------------------
	
	private static final String PROPS_QUERY_TYPE = "query_type_class";
	
	
	// -------------------------------------------------------------------------
	// CONFIGURATIONS
	// -------------------------------------------------------------------------
	
	/**
	 * The config properties.
	 */
	private Properties mQueryConfig;
	
	/**
	 * The query type to be used
	 */
	private IQueryCreator mQueryType;
	
	
	// -------------------------------------------------------------------------
	// INITIALIZATION
	// -------------------------------------------------------------------------
	
	/**
	 * Constructor.
	 */
	public GenericQueryGenerator(String configPath){
		// Load properties
		mQueryConfig = this.loadProperties(configPath);
		
		// Set query type
		mQueryType = this.createQueryType(
				mQueryConfig.getProperty(PROPS_QUERY_TYPE));	
		
	}
	
	/**
	 * Creates and returns an object of the query type class 
	 * specified by its class name
	 */
	private IQueryCreator createQueryType(String className){
		IQueryCreator component = null;
		try{
			component = (IQueryCreator) Class.forName(className, true, 
							this.getClass().getClassLoader()).newInstance();
		} catch (Exception e){
			e.printStackTrace();
		}
		return component;
	}
	
	/**
	 * Loads the properties.
	 */
	private Properties loadProperties(String path){
		Properties props = new Properties();
		FileInputStream inputStream = null;
		Path configFile = Paths.get(path);
		try {
			inputStream = new FileInputStream(configFile.toString());
			props.load(inputStream);
		} catch (IOException ioe){
			ioe.printStackTrace();
		}
		return props;
	}
	
	/**
	 * Generate query
	 */
	public List<PreparedQuery> generateQuery(String queryString) {
		System.out.println("---------------------------------------------");
		System.out.println("Processing query with given configuration... ");
		System.out.println("---------------------------------------------");
		System.out.println("Original query string: " + queryString);
		
		mQueryType.initializeQuery(mQueryConfig);
		return mQueryType.createQuery(queryString);
	}
	
	
	/**
	 * Main method for testing
	 */
	public static void main(String[] args) {
		GenericQueryGenerator generator = new GenericQueryGenerator(ConfigPath);
		
		String queryString = "abc ahh against death penalty";
		List<PreparedQuery> output = generator.generateQuery(queryString);
	
		System.out.println("Prepared queries count: " + output.size());
		for (PreparedQuery preparedQuery : output) {
			System.out.println(
				  "sub-query: " + preparedQuery.queryString() + "	"
				+ "stance-inv: " + preparedQuery.stanceIndicator());
		}
	}
}
